name: CI & Release

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write      # Для тегов/релизов
  issues: read         # Для чтения PR body
  pull-requests: read  # Для PR событий

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest tests/ -v

  # Релиз только при push в master (после merge PR)
  release:
    needs: test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Для истории коммитов

      # Установка GitHub CLI (gh) — обязательно!
      - name: Install GitHub CLI
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install gh

      # Генерация версии (patch bump)
      - name: Generate version
        id: version
        run: |
          if git describe --tags --abbrev=0 2>/dev/null; then
            TAG=$(git describe --tags --abbrev=0)
            VERSION=${TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          else
            NEW_VERSION="0.1.0"
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      # Получение PR body из merge commit (с фиксом auth)
      - name: Get PR description from merge commit
        id: pr_body
        env:
          GH_TOKEN: ${{ github.token }}  # Используем GITHUB_TOKEN как GH_TOKEN
        run: |
          MERGE_COMMIT=$(git log -1 --pretty=%B)
          BODY="Автоматический релиз без описания PR."
          
          if [[ $MERGE_COMMIT == Merge\ pull\ request* ]]; then
            PR_NUMBER=$(echo "$MERGE_COMMIT" | head -1 | grep -o '#[0-9]\+' | tr -d '#')
            if [ -n "$PR_NUMBER" ]; then
              # gh api с явным token (если env не сработает)
              PR_BODY=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq .body --header "Authorization: token $GH_TOKEN" 2>/dev/null || echo "")
              if [ -n "$PR_BODY" ]; then
                BODY="$PR_BODY"
              fi
            fi
          fi
          
          # Экранирование для multiline в body
          BODY="${BODY//%/%%}"
          BODY="${BODY//$'\n'/\\n}"
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Создание пустых папок ascii/ и img/
      - name: Create empty directories
        run: |
          mkdir -p release-build/ascii
          mkdir -p release-build/img
          touch release-build/ascii/.gitkeep
          touch release-build/img/.gitkeep

      # Копируем только нужные файлы (тесты/ .github/ игнорируем)
      - name: Copy release files
        run: |
          cp viewer.py converter.py settings.py requirements.txt release-build/
          echo "Релиз собран: viewer.py, converter.py, settings.py, requirements.txt + пустые ascii/, img/"

      # Создаём ZIP
      - name: Create ZIP archive
        run: |
          cd release-build
          zip -r ../ascii-converter-${{ steps.version.outputs.version }}.zip .
          cd ..

      # Создаём GitHub Release (обновлённая версия action)
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v4
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: ASCII Converter v${{ steps.version.outputs.version }}
          body: |
            ${{ steps.pr_body.outputs.body }}

            ## Что в релизе:
            - `viewer.py`
            - `converter.py`
            - `settings.py`
            - `requirements.txt`
            - Пустые папки: `ascii/`, `img/`

            Скачайте ZIP ниже.
          draft: false
          prerelease: false

      # Загружаем ZIP как asset (обновлённая версия)
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ascii-converter-${{ steps.version.outputs.version }}.zip
          asset_name: ascii-converter-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip
